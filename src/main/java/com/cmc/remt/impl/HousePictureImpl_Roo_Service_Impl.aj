// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cmc.remt.impl;

import com.cmc.remt.domain.HouseInfo;
import com.cmc.remt.domain.HousePicture;
import com.cmc.remt.impl.HousePictureImpl;
import com.cmc.remt.repo.GlobalSearch;
import com.cmc.remt.repo.HousePictureRepo;
import com.cmc.remt.svr.HousePictureSvr;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect HousePictureImpl_Roo_Service_Impl {
    
    declare parents: HousePictureImpl implements HousePictureSvr;
    
    declare @type: HousePictureImpl: @Service;
    
    declare @type: HousePictureImpl: @Transactional(readOnly = true);
    
    public HousePictureRepo HousePictureImpl.housePictureRepo;
    
    @Autowired
    public HousePictureImpl.new(HousePictureRepo housePictureRepo) {
        this.housePictureRepo = housePictureRepo;
    }

    @Transactional(readOnly = false)
    public HousePicture HousePictureImpl.save(HousePicture entity) {
        return housePictureRepo.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void HousePictureImpl.delete(Long id) {
         housePictureRepo.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<HousePicture> HousePictureImpl.save(Iterable<HousePicture> entities) {
        return housePictureRepo.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void HousePictureImpl.delete(Iterable<Long> ids) {
        List<HousePicture> toDelete = housePictureRepo.findAll(ids);
        housePictureRepo.deleteInBatch(toDelete);
    }
    
    public List<HousePicture> HousePictureImpl.findAll() {
        return housePictureRepo.findAll();
    }
    
    public List<HousePicture> HousePictureImpl.findAll(Iterable<Long> ids) {
        return housePictureRepo.findAll(ids);
    }
    
    public HousePicture HousePictureImpl.findOne(Long id) {
        return housePictureRepo.findOne(id);
    }
    
    public long HousePictureImpl.count() {
        return housePictureRepo.count();
    }
    
    public Page<HousePicture> HousePictureImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return housePictureRepo.findAll(globalSearch, pageable);
    }
    
    public Long HousePictureImpl.countByHouseInfoId(Long id) {
        return housePictureRepo.countByHouseInfoId(id);
    }
    
    public Page<HousePicture> HousePictureImpl.findAllByHouseInfo(HouseInfo houseInfoField, GlobalSearch globalSearch, Pageable pageable) {
        return housePictureRepo.findAllByHouseInfo(houseInfoField, globalSearch, pageable);
    }
    
}
