// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cmc.remt.web;

import com.cmc.remt.domain.HouseInfo;
import com.cmc.remt.domain.HousePicture;
import com.cmc.remt.repo.GlobalSearch;
import com.cmc.remt.web.HouseInfoController;
import java.lang.SuppressWarnings;
import java.net.URI;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect HouseInfoController_Roo_JSON {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<HouseInfo> HouseInfoController.list(GlobalSearch search, Pageable pageable) {
        
        Page<HouseInfo> houseInfoes = houseInfoSvr.findAll(search, pageable);
        return houseInfoes;
    }
    
    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity HouseInfoController.create(@Valid @RequestBody HouseInfo houseInfo, BindingResult result) {
        
        if (houseInfo.getId() != null) {
            return new ResponseEntity(HttpStatus.CONFLICT);
        }
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        HouseInfo newHouseInfo = houseInfoSvr.save(houseInfo);
        HttpHeaders responseHeaders = populateHeaders(newHouseInfo.getId());
        
        return new ResponseEntity(newHouseInfo, responseHeaders, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{houseInfo}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity HouseInfoController.update(@Valid @RequestBody HouseInfo houseInfo, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        HouseInfo savedHouseInfo = houseInfoSvr.save(houseInfo);
        
        return new ResponseEntity(savedHouseInfo, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes" })
    public ResponseEntity HouseInfoController.delete(@PathVariable("id") Long id) {
        
        houseInfoSvr.delete(id);
        
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity HouseInfoController.createBatch(@Valid @RequestBody Collection<HouseInfo> houseInfoes, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<HouseInfo> newHouseInfoes = houseInfoSvr.save(houseInfoes);
        
        return new ResponseEntity(newHouseInfoes, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/batch", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity HouseInfoController.updateBatch(@Valid @RequestBody Collection<HouseInfo> houseInfoes, BindingResult result) {
        
        if (result.hasErrors()) {
            return new ResponseEntity(result, HttpStatus.CONFLICT);
        }
        
        List<HouseInfo> savedHouseInfoes = houseInfoSvr.save(houseInfoes);
        
        return new ResponseEntity(savedHouseInfoes, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/batch/{ids}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes" })
    public ResponseEntity HouseInfoController.deleteBatch(@PathVariable("ids") Collection<Long> ids) {
        
        houseInfoSvr.delete(ids);
        
        return new ResponseEntity(HttpStatus.OK);
    }
    
    public HttpHeaders HouseInfoController.populateHeaders(Long id) {
        UriComponents uriComponents = UriComponentsBuilder.fromUriString("/houseinfoes/{id}").build();
        URI uri = uriComponents.expand(id).encode().toUri();
        
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.setLocation(uri);
        return responseHeaders;
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResponseEntity HouseInfoController.show(@PathVariable("id") Long id) {
        
        HouseInfo houseInfo = houseInfoSvr.findOne(id);
        
        if (houseInfo == null) {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity(houseInfo, HttpStatus.FOUND);
    }
    
}
